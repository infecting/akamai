var bmak = bmak && bmak.hasOwnProperty("ver") && bmak.hasOwnProperty("sed") ? bmak : {
    ver: 1.7,
    ke_cnt_lmt: 150,
    mme_cnt_lmt: 100,
    mduce_cnt_lmt: 75,
    pme_cnt_lmt: 25,
    pduce_cnt_lmt: 25,
    tme_cnt_lmt: 25,
    tduce_cnt_lmt: 25,
    doe_cnt_lmt: 10,
    dme_cnt_lmt: 10,
    vc_cnt_lmt: 100,
    doa_throttle: 0,
    dma_throttle: 0,
    session_id: "default_session",
    js_post: false,
    loc: "",
    params_url: "https://www.fedex.com/get_params'",
    cf_url: "https://www.fedex.com/rotHnE/Qan7/1Mb/nZw/xPmnOhcnqsk/Q3ES2zGp/HXYyb00D/ATR1GG/kOAHcB",
    auth: "",
    api_public_key: "afSbep8yjnZUjq3aL010jO15Sawj2VZfdYK8uY90uxq",
    aj_lmt_doact: 1,
    aj_lmt_dmact: 1,
    aj_lmt_tact: 1,
    ce_js_post: 0,
    init_time: 0,
    informinfo: "",
    prevfid: -1,
    fidcnt: 0,
    sensor_data: 0,
    ins: null,
    cns: null,
    enGetLoc: 0,
    enReadDocUrl: 1,
    disFpCalOnTimeout: 0,
    xagg: 12147,
    pen: 0,
    brow: "",
    browver: "",
    psub: "20030107",
    lang: "-",
    prod: "Gecko",
    plen: -1,
    doadma_en: 0,
    sdfn: [],
    d2: 0,
    d3: 0,
    thr: 0,
    cs: "0a46G5m17Vrp4o4c",
    hn: "unk",
    z1: 0,
    o9: 0,
    vc: "",
    wen: 0,
    den: 0,
    y1: 2016,
    ta: 0,
    tst: -1,
    t_tst: 0,
    ckie: "_abck",
    n_ck: "0",
    ckurl: 0,
    bm: false,
    mr: "-1",
    altFonts: false,
    rst: false,
    runFonts: false,
    fsp: false,
    firstLoad: true,
    pstate: false,
    mn_mc_lmt: 10,
    mn_state: 0,
    mn_mc_indx: 0,
    mn_sen: 0,
    mn_tout: 100,
    mn_stout: 1e3,
    mn_ct: 1,
    mn_cc: "",
    mn_cd: 1e4,
    mn_lc: [],
    mn_ld: [],
    mn_lcl: 0,
    mn_al: [],
    mn_il: [],
    mn_tcl: [],
    mn_r: [],
    mn_rt: 0,
    mn_wt: 0,
    mn_abck: "",
    mn_psn: "",
    mn_ts: "",
    mn_lg: [],
    loap: 1,
    dcs: 0,
ir: function() {
    bmak.start_ts = Date.now ? Date.now() - 2000 : +new Date() - 2000;
    bmak.kact = "";
    bmak.d2 = "";
    bmak.ke_cnt = 0;
      {bmak.ke_vel = 0;
      bmak.mact = "";
      bmak.mme_cnt = 0;
      bmak.mduce_cnt = 0;
      bmak.me_vel = 0;
      bmak.pact = "";
      bmak.pme_cnt = 0;
      bmak.pduce_cnt = 0;
      bmak.pe_vel = 0;
      bmak.tact = "";
      bmak.tme_cnt = 0;
      bmak.tduce_cnt = 0;
      bmak.te_vel = 0;
      bmak.doact = "";
      bmak.doe_cnt = 0;
      bmak.doe_vel = 0;
      bmak.dmact = "";
      bmak.dme_cnt = 0;
      bmak.dme_vel = 0;
      bmak.vcact = "";
      bmak.vc_cnt = 0;
      bmak.aj_indx = 0;
      bmak.aj_ss = 0;
      bmak.aj_type = -1;
      bmak.aj_indx_doact = 0;
      bmak.aj_indx_dmact = 0;
      bmak.aj_indx_tact = 0;
      bmak.me_cnt = 0;
      bmak.pe_cnt = 0;
      bmak.te_cnt = 0;
      bmak.nav_perm = "";
      bmak.brv = 0;
      bmak.hbCalc = false;
      bmak.fmh = bmak.font_seed();
      bmak.fmz = "";
      bmak.ssh = bmak.csh();
      bmak.extensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_half_float', 'EXT_disjoint_timer_query', 'EXT_float_blend', 'EXT_frag_depth', 'EXT_shader_texture_lod', 'EXT_texture_compression_rgtc', 'EXT_texture_filter_anisotropic', 'WEBKIT_EXT_texture_filter_anisotropic', 'EXT_sRGB', 'OES_element_index_uint', 'OES_fbo_render_mipmap', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_s3tc', 'WEBKIT_WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_debug_renderer_info', 'WEBGL_debug_shaders', 'WEBGL_depth_texture', 'WEBKIT_WEBGL_depth_texture', 'WEBGL_draw_buffers', 'WEBGL_lose_context', 'WEBKIT_WEBGL_lose_context', 'WEBGL_multi_draw']
      bmak.wv = "Apple";
      bmak.wr = "Apple M1";
      bmak.weh = bmak.ats(bmak.mn_s(JSON.stringify(bmak.extensions.sort())));;
      bmak.devices_info = [
        {
          "uar": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36",
          "availHeight": 816,
          "availWidth": 1440,
          "width": 1440,
          "height": 900,
          "innerHeight": bmak.getRandomInt(500, 816),
          "innerWidth": bmak.getRandomInt(500, 1440)
        }
      ];  
      bmak.wl = 0;}
},

get_cf_date: function() {
    return Date.now ? Date.now() : +new Date();
},

diff_dates: function() {
    return bmak.get_cf_date() - bmak.start_ts;
},

set_z1: function() {
    bmak.z1 = parseInt((bmak.start_ts / (bmak.y1 * bmak.y1)))
},

to: function() {
    var t = bmak.get_cf_date() % 1e7;
    bmak.d3 = t;

    for (a = t, e = parseInt(String.fromCharCode(51)), n = 0, undefined; n < 5; n++) {
      var a;
      var e;
      var n;
      var o = parseInt(t / Math.pow(10, n)) % 10;
      var m = o + 1;
      op = bmak.cc(o);
      a = op(a, m);
    }

    bmak.o9 = a * e;
  },

cc: function(t) {
    var a = t % 4;

    if (a == 2) {
      a = 3;
    }

    var e = a + 42;

    var n = function(t, a) {
      return 0;
    };

    if (e == 42) var n = function(t, a) {
      return t * a;
    };
    else if (e == 43) var n = function(t, a) {
      return t + a;
    };
    else var n = function(t, a) {
      return t - a;
    };
    return n;
  },

  // scramble input
  ab: function(t) {
    if (t == null) return -1;

    try {
      for (a = 0, e = 0, undefined; e < t.length; e++) {
        var a;
        var e;
        var n = t.charCodeAt(e);

        if (n < 128) {
          a += n;
        }
      }

      return a;
    } catch (t) {
      return -2;
    }
  },
  getRandomInt: function(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
},
jrs: function(t) {
  for (a = Math.floor(Math.random() * 1e5 + 1e4), e = String(t * a), n = 0, o = [], m = e.length >= 18, undefined; o.length < 6;) {
    var a;
    var e;
    var n;
    var o;
    var m;
    o.push(parseInt(e.slice(n, n + 2)));
    n = m ? n + 3 : n + 2;
  }
  return [a, bmak.cal_dis(o)];
},
cal_dis: function(t) {
  var a = t[0] - t[1];
  var e = t[2] - t[3];
  var n = t[4] - t[5];
  var o = Math.sqrt(a * a + e * e + n * n);
  return Math.floor(o);
},

fas: function() {
  try {
    return Boolean(navigator.credentials) + (Boolean(navigator.appMinorVersion) << 1) + (Boolean(navigator.bluetooth) << 2) + (Boolean(navigator.storage) << 3) + (Boolean(Math.imul) << 4) + (Boolean(navigator.getGamepads) << 5) + (Boolean(navigator.getStorageUpdates) << 6) + (Boolean(navigator.hardwareConcurrency) << 7) + (Boolean(navigator.mediaDevices) << 8) + (Boolean(navigator.mozAlarms) << 9) + (Boolean(navigator.mozConnection) << 10) + (Boolean(navigator.mozIsLocallyAvailable) << 11) + (Boolean(navigator.mozPhoneNumberService) << 12) + (Boolean(navigator.msManipulationViewsEnabled) << 13) + (Boolean(navigator.permissions) << 14) + (Boolean(navigator.registerProtocolHandler) << 15) + (Boolean(navigator.requestMediaKeySystemAccess) << 16) + (Boolean(navigator.requestWakeLock) << 17) + (Boolean(navigator.sendBeacon) << 18) + (Boolean(navigator.serviceWorker) << 19) + (Boolean(navigator.storeWebWideTrackingException) << 20) + (Boolean(navigator.webkitGetGamepads) << 21) + (Boolean(navigator.webkitTemporaryStorage) << 22) + (Boolean(Number.parseInt) << 23) + (Boolean(Math.hypot) << 24);
  } catch (t) {
    return 0;
  }
},
font_seed: function() {
  e = "Monospace:1267,221;Wingdings 2:1267,221;ITC Bodoni 72 Bold:1267,221;Menlo:1272,223;Gill Sans MT:1355,221;Lucida Sans:1355,221;Bodoni 72:1355,221;Serif:1355,221;Shree Devanagari 714:1355,221;Microsoft Tai Le:1355,221;Nimbus Roman No 9 L:1355,221;Candara:1355,221;Press Start 2P:1355,221;Waseem:1355,277;";
  return bmak.ats(bmak.mn_s(e));
},

rotate_right: function(t, a) {
  return t >>> a | t << a - 32;
},

encode_utf8: function(t) {
  return unescape(encodeURIComponent(t));
},

mn_s: function(t) {
  var a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
  var e = 1779033703;
  var n = 3144134277;
  var o = 1013904242;
  var m = 2773480762;
  var r = 1359893119;
  var i = 2600822924;
  var c = 528734635;
  var b = 1541459225;
  var d = bmak.encode_utf8(t);
  var s = d.length * 8;
  d += String.fromCharCode(128);

  for (k = d.length / 4 + 2, l = Math.ceil(k / 16), u = new Array(l), _ = 0, undefined; _ < l; _++) {
    var k;
    var l;
    var u;

    var _;

    u[_] = new Array(16);

    for (var f = 0; f < 16; f++) u[_][f] = d.charCodeAt(_ * 64 + f * 4) << 24 | d.charCodeAt(_ * 64 + f * 4 + 1) << 16 | d.charCodeAt(_ * 64 + f * 4 + 2) << 8 | d.charCodeAt(_ * 64 + f * 4 + 3) << 0;
  }

  var p = s / Math.pow(2, 32);
  u[l - 1][14] = Math.floor(p);
  u[l - 1][15] = s;

  for (var v = 0; v < l; v++) {
    for (g = new Array(64), w = e, y = n, E = o, S = m, C = r, h = i, B = c, x = b, _ = 0, undefined; _ < 64; _++) {
      var h;
      var g;
      var w;
      var y;
      var E;
      var S;
      var C;
      var h;
      var B;
      var x;

      var _;

      var M;
      var j;
      var A;
      var L;
      var P;
      var T;

      if (_ < 16) {
        g[_] = u[v][_];
      } else {
        M = bmak.rotate_right(g[_ - 15], 7) ^ bmak.rotate_right(g[_ - 15], 18) ^ g[_ - 15] >>> 3;
        j = bmak.rotate_right(g[_ - 2], 17) ^ bmak.rotate_right(g[_ - 2], 19) ^ g[_ - 2] >>> 10;
        g[_] = g[_ - 16] + M + g[_ - 7] + j;
      }

      j = bmak.rotate_right(C, 6) ^ bmak.rotate_right(C, 11) ^ bmak.rotate_right(C, 25);
      A = C & h ^ ~C & B;
      L = x + j + A + a[_] + g[_];
      M = bmak.rotate_right(w, 2) ^ bmak.rotate_right(w, 13) ^ bmak.rotate_right(w, 22);
      P = w & y ^ w & E ^ y & E;
      T = M + P;
      x = B;
      B = h;
      h = C;
      C = S + L >>> 0;
      S = E;
      E = y;
      y = w;
      w = L + T >>> 0;
    }

    e += w;
    n += y;
    o += E;
    m += S;
    r += C;
    i += h;
    c += B;
    b += x;
  }

  return [e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, e & 255, n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, n & 255, o >> 24 & 255, o >> 16 & 255, o >> 8 & 255, o & 255, m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, m & 255, r >> 24 & 255, r >> 16 & 255, r >> 8 & 255, r & 255, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, i & 255, c >> 24 & 255, c >> 16 & 255, c >> 8 & 255, c & 255, b >> 24 & 255, b >> 16 & 255, b >> 8 & 255, b & 255];
},
getmr: function() {
  var Obj, i, x = "";
  Obj = {
      mr_dict: ['48,53,52,53,69,67,144,10,11,6,6,5,9,355,', '37,60,39,38,20,21,14,8,9,5,5,5,9,371,', '54,36,37,35,18,18,11,8,6,5,5,5,9,331,', '7,9,10,13,26,28,17,11,10,8,8,8,12,523,', '9,13,14,13,25,26,16,11,10,8,8,6,10,350,', '7,8,9,9,17,18,11,8,7,5,5,7,13,490,', '9,13,13,12,25,27,16,13,10,7,6,6,9,348,', '7,38,14,13,26,27,17,12,10,8,7,7,12,421,', '8,12,12,161,88,20,13,8,7,5,5,5,9,402,', '6,9,9,9,17,18,11,8,7,5,6,5,9,335,', '7,9,10,9,17,18,11,8,7,5,5,5,9,333,', '6,9,9,9,18,18,12,8,7,5,7,5,9,339,', '6,9,9,9,18,18,11,15,6,5,5,5,9,334,', '6,10,9,9,18,17,11,8,7,5,5,5,9,411,', '6,10,10,9,17,18,11,8,7,6,5,5,9,331,', '6,9,9,9,17,18,11,8,7,5,5,5,9,334,', '7,9,9,13,17,19,11,8,7,5,5,5,9,336,', '6,9,9,12,18,18,11,8,7,5,5,5,9,358,', '6,9,9,9,18,18,11,8,7,5,5,5,8,478,', '6,9,10,9,18,18,11,8,7,5,5,5,9,373,', '6,9,10,9,18,18,11,8,6,5,5,5,9,359,', '6,9,9,9,17,18,11,8,7,5,5,5,9,360,', '6,12,10,9,17,18,11,8,6,5,5,5,8,332,', '7,9,9,9,17,18,11,8,6,5,5,5,9,368,', '8,9,9,11,17,18,11,8,6,5,5,5,10,374,', '6,8,10,8,17,18,67,8,6,5,5,5,9,335,', '7,9,9,10,18,18,11,8,6,5,5,5,9,394,', '8,9,9,9,17,18,12,8,7,5,5,5,9,385,', '8,10,9,9,30,78,11,10,10,6,6,5,9,413,', '10,13,15,14,36,38,18,13,12,8,8,8,15,543,', '10,14,13,9,31,31,12,10,10,6,6,6,12,377,', '8,9,11,9,29,34,13,10,10,6,6,6,13,521,', '9,13,14,13,28,26,15,11,10,8,7,6,10,361,', '7,9,9,9,18,54,11,8,7,5,5,6,9,333,', '7,9,9,9,17,18,11,8,7,5,5,5,9,330,', '7,9,9,9,17,18,11,8,6,5,5,5,9,335,', '6,9,9,9,18,18,11,8,7,5,5,5,9,337,', '7,9,9,9,29,30,13,10,10,6,6,6,12,378,', '8,9,11,9,30,46,11,8,7,5,5,5,8,340,', '7,9,9,9,17,18,11,8,7,5,5,5,9,338,', '7,9,9,9,17,18,11,8,7,5,5,5,9,343,', '6,9,9,9,17,18,11,8,7,5,5,6,12,381,', '8,9,11,10,29,31,13,10,10,6,6,6,13,379,', '8,9,11,10,30,18,11,8,7,5,5,5,9,349,', '7,9,9,10,18,18,11,8,7,5,5,5,9,341,', '7,9,11,10,29,30,12,10,10,6,7,5,9,333,', '7,9,9,10,17,18,11,8,7,5,5,6,12,374,', '8,10,11,10,37,27,17,11,10,8,8,8,14,464,', '10,15,15,11,30,32,17,12,11,8,8,8,13,425,', '8,10,10,10,18,18,11,8,8,6,5,5,8,380,', '6,9,9,10,17,18,11,8,7,5,5,5,8,338,', '7,9,9,9,18,19,11,8,7,5,5,5,9,330,', '7,9,9,9,17,18,11,8,7,5,5,5,9,342,', '6,9,9,10,73,18,11,8,7,5,6,8,13,486,', '10,13,14,12,24,28,16,10,8,6,6,6,9,389,', '7,9,10,9,17,18,11,8,6,5,5,5,9,345,', '6,9,9,9,18,18,11,8,7,7,7,8,13,493,', '12,14,15,13,28,28,58,12,9,6,6,5,9,333,', '7,10,9,9,17,18,11,8,7,5,5,5,8,334,', '6,9,9,9,17,18,11,8,7,5,5,5,9,502,', '10,13,14,13,28,29,18,11,9,8,8,8,11,369,', '7,9,9,9,17,117,11,8,6,5,5,5,9,334,', '6,9,10,14,43,51,18,14,7,5,6,5,9,704,', '6,9,9,9,17,18,11,8,6,5,5,5,9,336,', '6,9,9,9,17,18,16,11,10,8,8,8,13,379,', '6,9,9,9,17,18,11,8,7,5,5,5,10,348,', '6,37,69,13,26,27,17,12,10,7,6,9,9,343,', '7,8,9,9,18,18,11,8,7,5,5,5,14,470,', '6,9,9,9,18,18,11,8,7,5,5,5,9,385,', '7,9,9,8,17,77,11,8,7,5,5,5,9,334,', '7,9,9,8,17,18,11,8,6,5,5,5,9,340,', '7,9,9,9,18,18,11,8,6,5,5,5,9,335,', '7,9,10,9,17,18,11,8,7,5,5,8,14,481,', '10,14,15,13,25,26,17,12,10,7,7,6,10,334,', '7,9,9,9,22,18,11,8,7,5,5,5,9,338,', '7,9,9,8,17,18,11,8,6,5,5,5,9,431,', '10,13,14,13,26,27,17,12,10,7,7,7,13,475,', '8,9,9,9,18,18,11,8,7,5,5,5,9,334,', '6,10,9,9,17,18,12,8,7,5,5,5,9,330,', '6,9,9,9,18,18,11,8,7,5,5,5,9,333,', '6,9,9,9,17,18,11,8,7,5,5,5,9,416,', '6,9,9,9,17,18,11,8,7,5,5,5,9,361,', '6,9,9,9,18,18,11,8,7,5,5,5,9,334,', '7,9,9,9,18,18,11,8,7,5,5,5,9,333,', '7,14,14,9,17,18,11,8,7,5,5,5,9,345,', '6,9,9,8,17,18,11,8,7,6,5,5,9,400,', '6,9,9,9,17,18,11,8,6,5,5,5,9,357,', '6,9,9,9,17,18,11,8,9,8,8,7,13,494,', '10,13,13,11,25,31,14,9,8,5,6,8,11,400,', '7,11,10,11,17,18,11,8,7,5,5,5,9,352,', '6,9,9,9,18,18,11,8,7,5,5,10,10,468,', '10,13,14,13,28,29,16,11,9,6,6,6,9,322,', '7,9,9,10,103,34,17,12,10,8,8,8,15,502,', '8,11,10,10,18,18,11,8,7,5,5,5,9,574,', '9,13,14,13,27,28,17,10,9,6,5,5,9,333,', '6,9,9,9,17,117,16,8,7,5,5,5,8,330,', '7,9,9,9,17,18,11,8,6,5,5,5,9,486,', '7,9,9,9,17,18,11,8,7,5,5,5,9,346,', '6,9,9,9,18,18,11,8,6,8,8,8,13,494,', '10,14,14,13,24,27,16,11,7,6,5,5,9,337,', '7,10,13,11,18,18,11,8,6,5,5,5,9,334,', '6,9,9,9,18,18,11,8,6,5,5,5,9,465,', '10,13,14,13,27,28,17,11,10,8,7,7,10,356,', '7,9,9,9,17,18,11,10,7,9,8,5,9,341,', '6,9,9,9,17,18,11,8,7,5,5,5,8,334,', '7,9,9,9,17,18,11,8,7,5,5,5,9,333,', '6,9,9,9,17,18,11,8,7,5,5,5,9,332,', '6,9,9,9,17,18,11,7,7,5,5,5,9,329,', '6,9,9,9,17,18,11,12,10,12,8,7,13,512,', '10,13,15,13,24,23,14,8,8,5,5,5,9,379,', '7,9,9,9,18,18,11,8,7,5,5,5,9,332,', '7,9,10,9,18,18,11,8,7,5,7,8,13,488,', '10,13,14,13,25,28,17,13,9,7,6,6,9,335,', '7,9,9,13,27,27,19,13,7,5,5,9,15,530,', '8,11,12,10,22,18,11,8,7,5,5,5,9,335,', '7,9,9,9,17,18,11,8,6,5,5,5,9,330,', '6,9,9,9,39,18,11,8,7,5,5,5,9,348,', '6,9,13,11,18,18,11,8,6,6,8,8,13,561,', '10,13,14,13,27,26,15,11,9,7,6,5,9,332,', '6,9,9,9,18,18,11,8,7,5,5,5,9,333,', '7,9,9,9,17,18,11,8,6,5,5,5,9,996,', '10,13,14,13,78,98,14,15,12,8,8,8,15,828,', '10,13,15,14,31,32,18,13,12,8,10,9,12,593,', '14,16,17,13,28,28,17,12,18,13,12,14,28,712,', '10,11,12,11,22,23,14,10,8,6,5,5,9,635,', '15,22,27,13,24,26,12,8,7,5,5,5,9,358,', '7,9,10,9,18,18,12,8,7,5,5,5,9,414,', '7,9,10,9,18,18,12,8,7,5,6,5,9,336,', '7,10,13,10,18,18,11,8,7,5,5,5,9,346,', '7,9,10,9,36,44,12,13,15,10,12,11,24,466,', '7,9,10,9,19,19,12,8,7,5,5,5,10,388,', '7,9,9,9,63,34,20,11,9,7,6,7,8,315,', '7,9,9,9,18,18,11,8,7,5,5,5,9,498,', '10,14,14,13,48,19,11,8,7,5,5,5,9,315,', '6,9,9,9,17,19,12,8,12,5,5,5,9,323,', '6,9,10,9,17,18,11,8,6,5,5,5,8,345,', '6,9,9,13,35,18,11,8,7,5,5,5,9,331,', '6,9,10,9,17,18,11,8,7,5,5,5,9,455,', '8,9,9,9,18,18,11,8,7,5,5,5,9,339,', '6,9,9,9,17,18,11,8,12,7,5,5,9,333,', '7,9,9,9,17,18,11,8,7,5,5,5,9,332,', '6,10,9,9,18,18,11,8,7,5,5,5,9,333,', '6,10,9,9,17,18,11,8,7,5,5,5,9,468,', '10,9,9,9,17,18,11,8,7,5,5,5,9,338,', '7,10,9,9,18,18,11,8,13,5,5,5,9,335,', '7,9,9,10,18,18,11,8,6,5,5,5,9,332,', '6,9,9,9,18,18,11,8,7,5,5,5,9,358,', '6,9,9,9,17,18,11,8,7,5,5,5,9,370,', '6,9,9,9,18,18,11,8,8,5,5,5,9,334,', '6,9,9,9,18,18,11,8,7,5,5,5,9,337,', '7,9,9,9,18,18,11,8,8,5,5,5,9,334,', '7,9,9,9,18,18,11,8,7,5,5,5,9,337,', '7,9,9,13,26,34,17,12,10,8,8,8,12,660,', '10,13,11,11,18,20,18,13,13,8,8,5,8,379,', '6,9,9,9,18,18,30,8,6,5,5,5,9,335,', '7,9,10,9,17,28,17,12,10,8,7,8,13,629,', '12,57,14,11,22,48,12,8,6,5,5,5,9,342,', '6,9,11,9,17,18,11,8,79,5,5,5,9,333,', '6,9,9,9,18,18,11,8,7,5,5,5,9,336,', '7,9,11,12,39,49,14,12,10,8,8,8,13,514,', '10,13,13,15,42,28,17,12,8,6,6,7,11,385,', '6,9,9,9,18,17,12,8,7,5,5,5,8,335,', '7,9,9,9,54,18,12,11,9,8,8,8,13,505,', '9,10,10,13,25,24,13,15,8,7,6,6,12,442,', '7,9,9,9,18,17,11,8,7,5,5,5,9,337,', '6,9,9,9,18,18,11,12,11,8,7,8,13,511,', '10,14,13,12,52,21,12,8,17,9,8,8,13,567,', '9,12,12,10,18,18,11,8,7,5,5,5,9,337,', '7,9,9,9,17,18,11,8,10,7,8,8,13,509,', '10,14,14,14,42,25,13,9,7,5,6,6,9,341,', '7,14,14,18,28,27,17,12,10,8,8,8,13,442,', '9,10,11,17,54,18,11,8,6,5,6,5,13,494,', '9,11,12,11,23,52,11,8,7,5,5,5,9,355,', '7,9,10,23,50,34,17,11,10,8,7,7,11,396,', '7,9,9,8,18,27,26,8,6,5,5,5,9,365,', '6,9,9,9,18,18,11,8,7,5,5,5,9,345,', '7,9,9,9,17,18,12,8,14,8,5,5,9,333,', '6,9,9,8,17,18,11,8,7,5,11,9,13,491,', '10,10,10,9,18,18,11,8,7,5,5,5,9,335,', '6,9,9,9,45,32,16,11,10,8,8,9,13,492,', '10,12,13,11,20,23,11,8,7,6,5,5,9,359,', '7,9,9,9,128,18,12,8,6,5,5,5,9,338,', '7,9,9,9,17,18,11,7,8,5,5,5,9,558,', '10,13,14,13,27,28,17,12,10,7,8,8,15,390,', '7,9,9,9,17,19,11,13,7,5,5,5,9,340,', '7,9,9,9,18,19,11,8,6,5,7,11,13,552,', '11,14,14,13,27,26,15,11,10,8,7,6,9,334,', '6,9,9,9,18,28,17,12,12,11,8,8,13,499,', '11,13,13,10,19,18,11,8,7,5,5,5,9,337,', '6,9,9,15,18,18,11,8,6,5,5,5,9,337,', '7,9,10,9,18,18,11,8,7,5,5,5,9,357,', '6,9,9,8,17,18,11,8,7,5,5,5,9,345,', '7,9,9,9,18,18,11,14,7,5,5,5,9,334,', '6,9,9,9,18,18,11,8,7,5,5,5,9,333,', '7,9,15,9,18,18,11,8,7,5,5,5,8,341,', '7,9,9,10,18,32,11,8,7,5,5,5,71,369,', '6,9,10,9,18,18,11,8,6,5,5,5,9,336,', '7,9,11,9,17,18,11,8,7,5,5,5,8,338,', '7,9,9,9,17,18,11,8,7,5,5,5,9,332,', '7,10,14,13,27,28,17,11,10,7,8,7,11,482,', '10,10,11,10,18,19,11,8,7,5,5,5,9,337,', '7,9,10,8,17,18,12,8,6,5,5,5,9,333,', '6,9,9,8,18,66,17,11,11,7,8,8,13,459,', '10,14,15,15,28,22,14,8,7,5,5,5,9,372,', '6,9,9,9,18,18,11,8,7,5,5,5,9,338,', '6,9,9,9,18,18,11,8,10,10,8,8,13,578,', '9,13,14,13,32,30,14,10,7,6,5,5,14,334,', '6,9,10,9,47,18,11,7,7,5,5,5,9,425,', '11,13,16,120,79,76,11,8,7,5,5,7,13,382,', '7,9,9,9,18,18,11,8,7,5,8,8,14,337,', '7,15,14,13,27,23,11,8,7,5,5,5,9,339,', '10,13,14,13,27,27,17,13,9,6,7,7,12,569,', '8,10,11,9,17,18,11,12,11,9,9,9,14,810,', '11,12,14,13,117,1240,58,47,409,8,8,138,41,1361,', '11,14,15,13,18,22,12,8,7,5,6,6,10,354,', '7,9,10,12,34,38,17,14,13,8,7,6,12,542,', '11,16,17,14,36,36,17,11,7,13,5,5,17,510,', '12,15,23,9,18,18,11,8,7,9,7,7,12,346,', '7,9,10,9,18,35,17,13,13,8,8,8,15,463,', '8,10,12,13,43,39,33,13,12,8,9,9,17,569,', '7,10,10,10,54,131,18,14,8,6,8,11,17,550,', '7,10,10,15,103,114,24,35,8,9,10,10,58,554,', '7,10,11,11,27,21,17,12,7,6,10,11,9,813,', '8,14,30,33,42,89,19,14,15,9,8,8,16,543,', '11,13,15,13,35,36,18,13,40,9,9,8,16,555,', '11,13,15,14,37,37,40,14,14,8,9,9,24,722,', '13,14,27,14,110,75,15,12,18,13,9,9,17,660,', '11,14,98,44,114,101,66,14,14,9,10,9,33,673,', '13,11,17,17,46,65,63,9,10,7,9,9,16,542,', '8,10,11,10,20,21,12,9,7,6,6,6,12,616,', '15,39,79,13,40,39,29,11,12,7,7,7,15,409,', '10,11,12,11,32,33,14,11,15,8,8,8,17,411,', '9,10,12,9,19,20,12,8,7,6,6,6,9,347,', '7,9,15,14,25,25,15,11,9,6,5,5,9,576,', '11,15,12,10,40,42,27,14,13,8,9,9,16,600,', '12,16,12,12,42,44,23,17,14,8,8,7,14,460,', '11,13,15,13,36,34,14,11,11,6,6,7,14,411,', '9,10,14,13,37,50,14,12,12,9,9,8,16,493,', '11,13,15,13,37,35,14,11,11,7,7,6,14,423,', '9,11,12,10,33,33,16,13,17,11,9,6,9,575,', '13,15,17,10,22,20,13,9,11,7,8,8,16,473,', '9,10,12,10,32,33,14,14,11,9,9,7,9,414,', '10,48,15,16,94,22,13,9,8,6,6,6,10,368,', '7,10,10,9,20,24,13,9,7,6,5,6,9,365,', '7,10,10,9,20,21,12,8,7,6,5,5,9,366,', '7,10,10,10,20,21,12,11,7,6,6,6,10,371,', '7,11,11,11,20,21,12,9,7,6,6,6,9,366,', '8,11,12,11,34,34,14,11,11,7,7,6,13,397,', '9,10,11,10,32,31,13,10,10,6,6,6,13,387,', '8,9,11,10,31,31,13,10,10,6,6,6,12,368,', '6,9,9,9,17,18,11,8,7,5,5,5,8,362,', '7,9,9,9,17,18,11,8,7,5,5,5,9,400,', '6,9,9,9,18,18,11,8,6,5,5,5,9,334,', '6,9,9,9,18,18,11,8,6,6,5,5,9,338,', '7,9,9,9,17,18,11,8,6,5,5,5,9,341,', '7,9,9,9,18,23,11,8,7,5,5,5,9,334,', '7,9,9,9,18,17,11,8,7,5,5,5,9,398,', '8,9,9,13,17,49,26,17,17,13,13,11,21,657,', '7,10,9,9,17,18,12,8,7,5,5,5,9,482,', '8,9,9,9,18,18,11,8,7,5,5,5,9,333,', '60,9,9,9,17,18,11,8,7,5,5,5,9,338,', '6,9,9,9,17,18,11,8,7,5,5,5,9,333,', '6,9,9,9,17,18,11,8,7,5,5,5,9,345,', '6,9,9,9,18,18,14,10,10,6,6,6,12,372,', '8,9,11,9,18,18,11,8,7,6,5,5,8,338,', '7,9,9,9,17,18,11,8,7,6,5,5,9,334,', '7,9,9,9,17,18,11,8,7,5,6,10,9,337,', '7,9,9,9,18,18,11,8,7,5,5,5,9,317,', '6,9,10,9,18,18,12,8,7,5,6,9,16,506,', '10,13,14,12,27,28,17,12,9,6,6,6,9,582,', '11,12,16,15,44,39,16,10,10,6,6,6,13,362,', '8,9,11,9,30,30,13,11,10,6,6,6,12,437,', '12,13,16,13,49,49,16,12,11,12,12,10,15,723,', '11,11,11,10,21,24,12,9,8,10,10,8,12,601,', '9,10,10,14,38,234,12,9,10,8,10,9,9,403,', '129,14,10,14,55,46,16,137,13,14,11,10,137,901,', '12,14,11,10,43,35,27,9,9,9,9,7,16,602,', '14,19,22,15,35,36,13,11,10,6,6,9,16,531,', '11,13,15,13,35,38,13,13,12,8,6,6,10,360,', '7,10,10,10,21,21,12,9,8,6,5,6,10,355,', '7,14,15,14,25,20,13,9,8,6,10,8,16,584,', '10,12,13,13,33,35,14,12,13,10,10,10,14,415,', '9,10,12,11,33,34,15,11,11,7,7,7,14,466,', '18,13,13,12,25,25,21,16,17,10,9,8,17,531,', '11,11,13,16,37,40,23,88,129,97,8,11,50,1606,', '12,15,16,16,58,134,57,14,13,8,12,10,38,544,', '11,14,15,13,338,37,19,13,13,11,11,9,16,678,', '15,15,14,13,51,111,18,15,15,112,9,9,16,866,', '109,17,17,15,95,48,35,155,13,95,87,9,106,1179,', '12,14,17,25,39,34,15,16,14,11,10,10,18,812,', '14,17,15,25,165,36,14,11,11,7,6,7,13,400,', '9,10,14,10,31,33,14,11,11,7,6,7,26,481,', '9,10,12,9,31,32,14,11,10,6,6,6,13,367,', '8,10,11,10,30,31,13,10,10,6,6,6,13,387,', '7,10,9,11,18,18,19,15,15,9,8,9,29,656,', '13,14,15,14,134,168,70,877,77,9,12,10,25,585,', '9,11,12,11,42,50,23,17,13,9,9,9,16,526,', '11,13,18,18,31,30,16,12,9,8,7,9,16,610,', '77,154,47,14,42,47,18,11,12,8,8,8,14,500,', '8,130,16,15,46,110,507,53,14,8,7,9,16,892,', '9,12,13,10,33,34,14,12,12,7,7,7,14,432,', '8,10,11,10,32,32,13,10,10,7,6,6,13,391,', '8,22,26,21,115,51,26,17,17,10,9,8,17,518,', '10,10,12,10,30,31,14,10,10,6,6,6,12,382,', '8,10,11,9,30,31,13,10,10,6,6,6,13,347,', '7,10,9,9,18,18,11,8,7,5,5,5,9,342,', '7,9,11,10,30,31,13,10,10,6,6,6,12,383,', '7,9,9,9,18,19,14,13,7,5,6,5,9,339,', '7,9,9,9,18,19,11,8,7,8,12,12,16,553,', '11,13,13,12,26,27,16,10,8,6,5,5,9,340,', '6,9,9,17,36,33,20,16,11,9,9,9,13,465,', '10,13,11,10,18,19,12,8,7,5,5,11,20,595,', '11,16,14,12,24,28,16,12,9,6,6,6,9,357,', '7,9,9,9,41,41,23,14,13,8,9,9,13,457,', '9,11,12,14,28,28,17,12,8,6,6,6,9,337,', '7,9,9,8,18,19,11,8,7,6,5,5,9,344,', '7,9,9,9,18,18,11,8,7,5,5,5,9,340,', '7,9,10,8,18,18,11,8,7,5,5,5,9,361,', '7,9,10,9,18,18,12,8,7,5,5,5,9,340,', '7,9,10,9,18,18,11,8,8,5,5,5,9,343,', '7,9,10,9,18,19,11,8,7,5,5,5,9,331,', '7,9,9,8,17,18,11,8,7,5,5,5,9,339,', '7,9,9,8,18,18,11,8,7,5,5,5,9,335,', '6,9,9,9,17,18,17,11,10,8,8,8,13,468,', '10,13,15,14,29,30,18,13,11,7,7,7,12,432,', '9,12,13,12,23,24,14,10,8,6,6,5,9,336,', '6,9,9,9,17,18,11,8,6,5,5,5,9,335,', '7,9,9,9,18,18,10,19,11,8,8,8,13,458,', '8,17,28,21,50,32,14,9,12,9,7,9,96,1411,', '11,49,14,59,41,40,19,15,14,9,50,9,16,546,', '7,11,17,13,74,18,12,8,7,5,5,5,9,337,', '7,9,9,9,19,63,40,24,23,9,10,9,14,681,', '13,13,14,13,36,39,17,9,7,6,6,6,9,404,', '7,9,10,10,18,69,27,12,55,8,6,7,9,340,', '7,9,10,14,42,80,13,14,24,12,7,7,11,517,', '9,12,12,9,19,19,12,8,7,5,5,5,9,350,', '9,9,9,9,18,19,12,8,7,8,11,11,15,485,', '9,11,12,14,23,33,11,8,7,5,5,5,9,330,', '6,9,10,16,27,27,17,12,10,8,8,8,13,453,', '9,11,11,10,18,19,11,8,7,5,5,5,14,474,', '10,14,14,13,27,28,17,12,9,7,7,7,12,338,', '7,9,9,9,17,18,12,8,6,5,5,5,9,320,', '7,9,9,9,18,18,11,8,7,11,8,8,14,611,', '9,13,14,13,29,30,14,10,8,6,6,5,9,338,', '6,9,9,9,18,18,11,8,6,5,5,5,9,334,', '6,9,9,9,18,18,11,8,6,5,5,11,15,497,', '10,14,15,14,24,24,15,11,9,7,8,7,10,339,', '6,9,9,9,18,18,11,8,7,5,5,8,13,590,', '10,13,14,14,244,23,15,10,8,6,7,5,9,336,', '6,9,10,10,17,18,11,8,7,5,5,5,9,335,', '7,9,9,9,18,18,11,8,6,5,5,5,9,566,', '6,9,9,9,17,18,11,8,6,5,5,5,9,330,', '7,11,9,9,17,18,103,8,7,5,5,5,8,344,', '6,9,9,9,18,18,11,8,6,5,5,5,9,447,', '118,13,15,13,27,27,16,12,7,5,5,5,9,322,', '7,9,10,9,28,32,11,8,6,5,5,8,9,411,', '9,11,12,10,18,18,11,8,6,5,5,5,9,390,', '10,13,11,10,143,53,11,8,6,5,5,5,9,325,', '6,9,9,9,17,18,11,8,7,6,5,5,9,442,', '7,10,9,9,17,18,11,8,6,5,5,5,9,331,', '6,9,9,13,27,27,17,12,10,8,5,5,9,472,', '10,13,15,13,31,25,16,9,8,6,5,8,13,472,', '10,13,10,9,18,18,11,8,7,5,5,5,8,322,', '7,9,9,17,33,28,17,12,10,8,8,6,9,429,', '9,12,10,8,18,18,11,8,7,5,5,5,9,448,', '10,13,10,8,18,18,11,8,6,5,5,5,9,334,', '7,9,9,9,18,18,11,8,16,10,8,8,13,505,', '7,9,9,9,18,18,11,8,7,5,5,5,9,336,', '6,9,9,9,18,18,11,8,14,6,5,5,9,339,', '7,9,9,8,18,18,11,8,7,5,5,5,9,334,', '6,9,10,9,18,18,11,8,7,8,8,8,13,491,', '10,14,14,12,27,28,15,10,8,5,5,8,13,340,', '6,9,9,9,17,17,11,8,7,5,5,5,9,364,', '6,9,9,8,18,18,92,11,10,8,8,8,13,509,', '9,13,14,14,29,22,13,10,7,5,5,5,9,449,', '8,9,9,9,17,18,11,8,7,5,5,5,9,330,', '7,9,13,13,27,27,17,12,11,5,5,5,8,341,', '7,9,9,9,18,18,11,8,7,5,5,5,9,452,', '10,13,14,10,52,18,11,8,8,8,8,8,13,529,', '10,12,13,13,44,25,12,9,7,5,5,94,9,338,', '7,9,9,9,17,27,17,12,10,8,8,10,14,493,', '10,14,15,13,104,25,12,8,7,5,5,5,9,336,', '6,9,9,9,17,18,11,8,8,11,8,8,13,549,', '7,9,9,9,18,18,11,8,7,5,5,6,13,484,', '10,14,14,13,24,27,13,10,10,6,6,6,10,381,', '7,9,9,9,17,18,11,8,6,5,6,5,9,337,', '6,9,10,8,17,46,17,12,10,7,8,8,13,503,', '9,11,11,11,18,37,11,8,6,5,9,5,9,333,', '6,9,9,8,18,18,11,8,6,6,5,5,9,416,', '7,9,9,9,34,18,11,8,7,5,5,5,8,342,', '6,9,9,9,18,18,11,8,8,5,5,5,9,540,', '10,13,14,14,27,29,17,11,9,8,8,7,11,384,', '6,9,10,11,18,18,11,8,7,5,5,5,9,347,', '7,9,10,8,18,18,11,8,7,5,5,5,8,349,', '6,104,9,8,18,18,11,8,7,5,5,5,8,353,', '6,9,9,9,18,18,11,8,7,5,5,5,38,509,', '10,13,14,15,27,28,15,11,10,8,8,6,11,407,', '6,9,9,9,18,18,11,8,7,5,5,5,9,338,', '7,9,13,13,40,27,17,11,7,5,5,5,9,448,', '7,14,14,9,18,18,12,8,7,5,5,5,9,407,', '7,9,9,9,18,19,11,11,13,8,7,8,13,420,', '6,9,9,9,17,18,11,8,6,5,5,5,9,487,', '10,13,9,8,17,18,11,8,7,8,9,5,9,339,', '6,9,9,8,35,37,16,12,12,147,8,6,11,419,', '8,10,9,8,17,18,11,8,9,7,11,6,9,336,', '7,9,9,11,38,23,14,10,8,6,5,5,9,336,', '6,9,12,11,22,18,11,10,8,6,6,6,11,425,', '7,9,9,9,18,19,11,8,7,5,5,5,9,377,', '14,13,17,13,24,23,17,8,7,5,5,5,9,329,', '7,9,10,10,18,19,11,8,18,8,8,8,13,604,', '9,10,10,9,18,18,11,8,7,5,5,5,9,356,', '7,9,9,11,18,18,11,8,11,9,8,8,13,487,', '10,14,14,11,24,19,11,8,6,5,5,6,9,419,', '164,14,14,13,18,18,17,12,9,6,6,6,11,346,', '6,9,9,10,40,38,17,13,10,8,9,6,11,412,', '6,9,9,8,18,18,11,8,7,5,5,5,9,494,', '9,13,14,14,31,50,14,10,8,6,6,5,9,334,', '7,9,9,9,18,18,26,14,10,8,7,8,14,373,', '8,11,11,9,18,18,11,8,7,5,5,5,8,337,', '7,16,14,13,27,27,16,11,6,5,5,5,9,351,', '6,9,9,9,18,18,11,8,7,5,5,8,15,749,', '9,13,14,14,27,29,18,11,9,5,5,5,9,349,', '6,9,10,8,17,18,11,12,10,8,8,8,13,448,', '7,9,14,13,27,28,17,12,9,8,7,7,11,341,', '7,9,9,9,17,18,11,8,7,5,5,5,9,336,', '7,10,10,9,17,18,11,8,7,5,5,5,9,337,', '6,9,9,9,18,18,11,8,7,5,5,5,9,337,', '7,9,9,9,17,18,12,11,7,5,5,5,13,483,', '6,9,9,9,18,19,11,8,7,5,5,5,9,357,', '7,9,9,9,17,18,11,8,6,5,5,5,9,333,', '7,9,9,9,18,46,17,12,11,8,7,5,9,340,', '7,9,10,9,18,19,11,8,7,5,5,5,9,334,', '6,9,9,9,18,55,16,8,7,5,5,5,9,341,', '6,10,9,9,18,18,11,8,7,5,5,5,9,387,', '6,9,9,9,18,18,11,8,7,5,5,5,9,344,', '6,9,9,8,18,18,11,8,7,5,5,5,9,340,', '6,9,9,8,18,18,11,8,7,5,5,5,9,392,', '10,13,14,13,28,62,11,8,6,5,5,5,9,336,', '6,9,9,8,17,18,11,8,7,5,5,5,9,372,', '6,9,10,8,17,18,11,8,6,5,5,5,9,335,', '6,9,9,9,18,18,11,8,6,5,5,5,9,340,', '7,9,9,9,17,18,11,8,7,5,5,5,9,335,', '7,9,9,9,18,17,11,8,59,6,8,8,15,481,', '7,15,22,22,34,33,16,13,13,9,8,6,9,1095,', '8,10,15,15,96,36,23,16,13,9,6,6,14,428,', '123,15,16,16,33,37,18,13,9,7,7,7,12,446,', '7,11,22,14,40,38,13,9,8,7,9,9,12,647,', '117,17,20,18,120,50,25,16,14,9,10,8,15,804,', '8,15,16,137,37,45,18,15,14,8,6,6,17,656,', '13,14,13,15,21,21,12,9,7,6,6,6,10,360,', '7,11,12,10,37,21,13,11,9,9,9,9,16,402,', '7,9,11,10,20,20,12,9,7,5,6,6,10,350,', '7,9,10,9,19,20,12,8,14,9,9,9,10,351,', '7,10,11,10,21,21,12,8,7,6,6,6,10,344,', '7,10,10,9,19,20,12,8,7,5,5,5,9,340,', '7,10,10,9,19,30,14,8,7,6,5,5,9,384,', '7,10,10,9,18,20,12,8,7,6,5,5,9,338,', '7,10,10,9,40,38,14,14,8,5,5,6,9,346,', '7,10,11,10,36,38,18,13,13,9,9,9,17,579,', '12,14,21,13,37,21,13,10,13,9,9,9,11,360,', '7,10,11,10,20,21,13,9,11,6,6,6,10,352,', '8,10,11,11,55,21,13,9,8,8,6,6,10,358,', '8,11,10,24,28,29,15,11,7,6,6,6,9,338,', '11,16,17,15,23,24,14,10,9,7,7,5,9,329,', '6,9,10,9,18,19,11,8,7,5,5,5,9,325,', '7,9,10,9,18,19,11,8,15,12,10,8,14,538,', '9,12,11,10,32,22,14,9,7,6,5,5,9,347,', '7,21,22,17,32,35,18,13,11,8,7,7,13,456,', '9,11,11,9,18,18,11,8,7,6,5,5,9,321,', '7,9,10,9,18,19,11,8,7,5,5,5,9,323,', '7,9,9,9,18,41,26,16,10,9,8,8,15,449,', '9,13,14,11,23,21,13,9,6,5,5,5,9,342,', '7,9,10,9,18,19,11,8,7,6,5,5,9,341,', '7,9,9,9,18,18,12,8,7,8,12,11,16,557,', '11,12,13,13,26,27,17,13,9,6,6,5,9,344,', '7,9,10,9,18,19,11,8,6,5,5,5,9,342,', '7,9,9,9,18,18,11,8,7,5,5,5,9,402,', '6,9,9,9,18,18,11,8,6,5,5,5,9,341,', '6,9,9,9,18,18,11,8,7,5,5,5,9,373,', '6,12,14,13,18,18,11,8,6,5,5,5,9,331,', '7,8,14,13,18,18,11,8,6,5,5,5,9,337,', '6,9,10,9,18,19,11,8,7,5,5,5,12,484,', '10,9,9,9,17,18,11,8,7,5,5,5,9,332,', '7,9,9,9,17,18,11,8,6,5,5,5,9,339,', '7,9,9,9,17,18,11,8,7,5,5,5,9,329,', '7,9,9,9,17,18,11,8,6,5,5,5,9,334,', '7,9,9,9,18,18,11,8,7,5,5,5,13,534,', '10,13,14,14,29,28,16,11,9,8,8,6,10,350,', '7,10,9,9,37,18,11,8,7,5,5,5,9,335,', '7,10,9,9,18,18,11,8,7,5,5,5,9,411,', '12,14,16,14,44,46,52,15,16,10,8,7,13,478,', '9,12,12,11,24,24,15,44,9,7,9,8,13,472,', '10,14,15,11,24,24,15,9,8,6,5,5,9,335,', '7,15,14,13,27,28,17,12,10,8,8,8,13,492,', '8,10,11,9,18,18,11,8,6,5,8,8,13,493,', '11,15,13,12,25,26,17,12,9,6,6,6,9,339,', '7,9,12,13,27,27,17,12,10,8,8,8,12,466,', '10,14,11,11,22,19,11,9,7,9,7,8,52,497,', '10,13,12,12,18,38,18,16,16,11,7,6,11,399,', '6,12,9,9,18,35,18,13,13,9,8,8,15,406,'],
  };
  bmak.mr = Obj.mr_dict[Math.floor(Math.random() * (45 - 2 + 1) + 2)];
},
ats: function(t) {
  for (a = "", e = 0, undefined; e < t.length; e++) {
    var a;
    var e;
    a += t[e].toString(16).length == 2 ? t[e].toString(16) : t[e].toString(16) + "0";
  }

  return a;
},
valStr: function() {
  var t = 30; //screen.colorDepth
  var e = 30; //screen.pixelDepth
  var n = true; // navigator.cookieEnabled
  var o = false; // navigator.javaEnabled
  var m = -1; // navigator.doNotTrack
  var r = "default";
  r = false ? false ? "0,13,15,16,18,20,27,28,29,34,35,36,37,38,40,43,44,8" /* bmak.fonts_opt() */ : "0,13,15,16,18,20,27,28,29,34,35,36,37,38,40,43,44,8" : "dis";
  return ['1838552554', '-59864811', r, ",7", true, true, true, 360, true, t, e, n, o, m].join(";");
},
csh: function() {
  return bmak.ats(bmak.mn_s("Alex_en-USAlice_it-ITAlva_sv-SEAmelie_fr-CAAnna_de-DECarmit_he-ILDamayanti_id-IDDaniel_en-GBDiego_es-AREllen_nl-BEFiona_enFred_en-USIoana_ro-ROJoana_pt-PTJorge_es-ESJuan_es-MXKanya_th-THKaren_en-AUKyoko_ja-JPLaura_sk-SKLekha_hi-INLuca_it-ITLuciana_pt-BRMaged_ar-SAMariska_hu-HUMei-Jia_zh-TWMelina_el-GRMilena_ru-RUMoira_en-IEMonica_es-ESNora_nb-NOPaulina_es-MXRishi_en-INSamantha_en-USSara_da-DKSatu_fi-FISin-ji_zh-HKTessa_en-ZAThomas_fr-FRTing-Ting_zh-CNVeena_en-INVictoria_en-USXander_nl-NLYelda_tr-TRYuna_ko-KRYuri_ru-RUZosia_pl-PLZuzana_cs-CZGoogle Deutsch_de-DEGoogle US English_en-USGoogle UK English Female_en-GBGoogle UK English Male_en-GBGoogle español_es-ESGoogle español de Estados Unidos_es-USGoogle français_fr-FRGoogle हिन्दी_hi-INGoogle Bahasa Indonesia_id-IDGoogle italiano_it-ITGoogle 日本語_ja-JPGoogle 한국의_ko-KRGoogle Nederlands_nl-NLGoogle polski_pl-PLGoogle português do Brasil_pt-BRGoogle русский_ru-RUGoogle 普通话（中国大陆）_zh-CNGoogle 粤語（香港）_zh-HKGoogle 國語（臺灣）_zh-TW"));
},

od: function(t, a) {
  try {
    t = String(t);
    a = String(a);
    var e = [];
    var n = a.length;

    if (n > 0) {
      for (var o = 0; o < t.length; o++) {
        var m = t.charCodeAt(o);
        var r = t.charAt(o);
        var i = a.charCodeAt(o % n);
        m = bmak.rir(m, 47, 57, i);

        if (m != t.charCodeAt(o)) {
          r = String.fromCharCode(m);
        }

        e.push(r);
      }

      if (e.length > 0) return e.join("");
    }
  } catch (t) {}

  return t;
},
rir: function(t, a, e, n) {
  return t > a && t <= e && (t += n % (e - a)) > e && (t = t - e + a), t;
},

curve: function(x) {
  return Math.pow(x, .623);
},

bezier: function(t, p0, p1, p2, p3){
  var cX = 3 * (p1.x - p0.x),
  bX = 3 * (p2.x - p1.x) - cX,
  aX = p3.x - p0.x - cX - bX;

  var cY = 3 * (p1.y - p0.y),
  bY = 3 * (p2.y - p1.y) - cY,
  aY = p3.y - p0.y - cY - bY;

  var x = (aX * Math.pow(t, 3)) + (bX * Math.pow(t, 2)) + (cX * t) + p0.x;
  var y = (aY * Math.pow(t, 3)) + (bY * Math.pow(t, 2)) + (cY * t) + p0.y;

  return {x: x, y: y};
},

sensor_totaler: function() {
  var mact = "";
  var bm = bmak.diff_dates();
  var x = bmak.getRandomInt(200,1440);
  var y = bmak.getRandomInt(300,816);
  var tot_x = 0;
  const one = bmak.getRandomInt(-200, 200);
  const two = bmak.getRandomInt(-500, 500);
  const three = bmak.getRandomInt(-400, 400);
  var random_x = [one, two, three];
  var random_x_3 = bmak.getRandomInt(200, 500)
  var coord = [{x: x + one, y: y - 100}, {x, y}, {x: x - two, y: y - 200}, {x: x + three, y: y - 400}]
  for (let i = 0; i < 1; i += 0.01) {
    var dd = bmak.bezier(i, {x: x + one, y: y - 100}, {x, y}, {x: x - two, y: y - 200}, {x: x + three, y: y - 400});
    dd.x = Math.round(dd.x);
    dd.y = Math.round(dd.y);
    bm += bmak.getRandomInt(0, 5)
    mact = mact + bmak.mover(Math.round(i * 100), bm, Math.round(dd.x), Math.round(dd.y));
  }
  return mact
},

mover: function(count, diff,  x, y) {
  return count + "," + 1 + "," + diff + "," + x + "," + y + ";" 
  // return "0,1,68,540,121;"
},

gd: function() {
  bmak.ir()
                                                                                               
  var device_info = bmak.devices_info[Math.floor(Math.random() * bmak.devices_info.length)];
  var user_agent = device_info["uar"]
  var serialized_uar = bmak.ab(device_info["uar"]);
  var start_2 = bmak.start_ts / 2;
  var availWidth = device_info["availWidth"];
  var availHeight = device_info["availHeight"];
  var width = device_info["width"];
  var height = device_info["height"];
  var innerHeight = device_info["innerHeight"];
  var innerWidth = device_info["innerWidth"];
  var outerWidth = innerWidth;
  var d = Math.random();
  var obfuscated_random = parseInt(d * 1e3 / 2);
  var random_seed = d + "";

  // Set some values - z1, d3
  bmak.set_z1()
  bmak.to()

  // Beginning of cookie
  final = user_agent + "," +
  "uaend" + "," +
  bmak.xagg.toString() + "," + 
  bmak.psub.toString() + "," + 
  "en-US" + "," + 
  bmak.prod + "," + 
  "5" + "," + 
  "0" + "," + 
  "0" + "," + 
  "0" + "," + 
  bmak.z1 + "," + 
  bmak.d3 + "," + 
  availWidth + "," + 
  availHeight + "," + 
  width + "," + 
  height + "," + 
  innerWidth + "," + 
  innerHeight + "," + 
  outerWidth + "," +
  ",cpen:0,i1:0,dm:0,cwen:0,non:1,opc:0,fc:0,sc:0,wrc:1,isc:0,vib:1,bat:1,x11:0,x12:1" + "," +
  serialized_uar + "," +
  random_seed.slice(0,10) + obfuscated_random + "," + 
  start_2 + "," + 
  "0" + "," +
  "loc:"
  return final;
},

  sensor: function() {
    bmak.fpcf = {};
    bmak.fpcf.fpValstr = bmak.valStr();
    bmak.wv = "Apple";
    bmak.wr = "Apple M1";
    bmak.wl = 31;
    bmak.getmr()
    var devicePixelRatio = 2;
    var date = bmak.get_cf_date();
    var difference = bmak.diff_dates();
    var cookie_exists = 2;
    var beginning = bmak.gd();
    var form_info = "0,-1,0,0,1498,-1,0;0,-1,0,1,2588,1468,0;0,-1,0,1,1500,1500,0;0,-1,0,1,1684,1684,0;0,-1,0,1,1684,1684,0;0,-1,0,1,1684,1684,0;0,-1,0,1,2563,-1,0;";
    var home_url = "https://www.fedex.com/global/choose-location.html";
    var aj_type = 1;
    var total_calls = 0;
    var obfuscated_start_time = bmak.jrs(bmak.start_ts);
    var f = (((bmak.start_ts / (2016 * 2016)) /23) / 6)
    var browser_fingerprint = bmak.fas();
    console.log(obfuscated_start_time)
    var cookie_array = [bmak.ke_vel + 1, bmak.me_vel + 32, bmak.te_vel + 32, bmak.doe_vel, bmak.dme_vel, bmak.pe_vel, total_calls, bmak.diff_dates(), bmak.init_time, bmak.start_ts, bmak.getRandomInt(10, 30),parseInt(bmak.z1 / 23), bmak.ke_cnt, bmak.me_cnt, f, bmak.pe_cnt, bmak.te_cnt, bmak.diff_dates(), 4989478 /* bmak.ta bmak.b() function */, "0", cookie_exists, bmak.ab(cookie_exists), Math.floor(Math.random() * 1e3).toString(), "-1604630381", browser_fingerprint, "PiZtE", obfuscated_start_time[0], obfuscated_start_time[1], 0, -1];
    var cookie_joined = cookie_array.join();
    var obfuscated_fpcf = bmak.ab(bmak.fpcf.fpValstr) + "";
    wgl_info = bmak.fmh + "," + 2 + "," + bmak.ssh + "," + bmak.wv + "," + bmak.wr + "," + bmak.weh + "," + bmak.wl;

    //sensor_data
    bmak.sensor_data = 
    bmak.ver.toString() + 
    "-1,2,-94,-100," + 
    beginning + 
    "-1,2,-94,-101," + 
    "do_en,dm_en,t_en" + 
    "-1,2,-94,-105," + 
    form_info + 
    "-1,2,-94,-102," + 
    form_info + 
    "-1,2,-94,-108," + 
    "-1,2,-94,-110," + 
    bmak.sensor_totaler() /* mact */ + 
    "-1,2,-94,-117," + 
    "-1,2,-94,-111," + 
    "-1,2,-94,-109," + 
    "-1,2,-94,-114," + 
    "-1,2,-94,-103," + 
    "0,1,70,857,382;" /* vcact */ + 
    "-1,2,-94,-112," + 
    home_url + 
    "-1,2,-94,-115," + 
    cookie_joined + 
    "-1,2,-94,-106," + 
    "1" + 
    "-1,2,-94,-119," + 
    "-1,2,-94,-119," + 
    bmak.mr + 
    "-1,2,-94,-122," + 
    "0,0,0,0,1,0,0" + 
    "-1,2,-94,-123," + 
    "-1,2,-94,-124," + 
    "-1,2,-94,-126," + 
    "-1,2,-94,-127," + 
    "10321144241322243122";

    P = bmak.ab(bmak.sensor_data) ^ 24;
    bmak.sensor_data = 
    bmak.sensor_data +
    "-1,2,-94,-70," +
    bmak.fpcf.fpValstr +
    "-1,2,-94,-80," +
    obfuscated_fpcf +
    "-1,2,-94,-116," + 
    bmak.o9 + 
    "-1,2,-94,-118," +
    wgl_info;

    var F = bmak.od(bmak.cs, bmak.api_public_key).slice(0, 16)
    var D = Math.floor(bmak.get_cf_date() / 36e5);
    var R = bmak.get_cf_date();
    var N = F + bmak.od(D, F) + bmak.sensor_data;
    bmak.sensor_data = N + ";" + (bmak.get_cf_date() - date) + ";" + 3 + ";" + (bmak.get_cf_date() - R);
    bmak.od

    return bmak.sensor_data
  }
}

console.log(bmak.sensor())
